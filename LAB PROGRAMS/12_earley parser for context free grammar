class EarleyParser:
    def __init__(self, grammar):
        self.grammar = grammar

    def predict(self, state, chart):
        next_symbol = state.next_symbol()
        if next_symbol in self.grammar:
            for production in self.grammar[next_symbol]:
                new_state = State(next_symbol, production, 0, state.origin)
                chart[state.origin].append(new_state)

    def scan(self, state, chart, token):
        next_symbol = state.next_symbol()
        if next_symbol == token and state.progress < len(state.production):
            new_state = State(state.nonterminal, state.production, state.progress + 1, state.origin)
            chart[state.origin + 1].append(new_state)

    def complete(self, state, chart):
        for s in chart[state.origin]:
            next_symbol = s.next_symbol()
            if next_symbol == state.nonterminal and s.progress < len(s.production):
                new_state = State(s.nonterminal, s.production, s.progress + 1, s.origin)
                chart[state.origin].append(new_state)

    def parse(self, sentence):
        chart = [[] for _ in range(len(sentence) + 1)]
        initial_state = State('S', ['NP', 'VP'], 0, 0)
        chart[0].append(initial_state)

        for i in range(len(chart)):
            for state in chart[i]:
                if not state.completed():
                    next_symbol = state.next_symbol()
                    if next_symbol in self.grammar:
                        self.predict(state, chart)
                    elif i < len(sentence):
                        self.scan(state, chart, sentence[i])

                else:
                    self.complete(state, chart)

        for state in chart[-1]:
            if state.nonterminal == 'S' and state.completed():
                return True

        return False


class State:
    def __init__(self, nonterminal, production, progress, origin):
        self.nonterminal = nonterminal
        self.production = production
        self.progress = progress
        self.origin = origin

    def next_symbol(self):
        if self.progress < len(self.production):
            return self.production[self.progress]
        else:
            return None

    def completed(self):
        return self.progress == len(self.production)


# Example usage:
grammar = {
    'S': [['NP', 'VP']],
    'NP': [['Det', 'N'], ['Det', 'N', 'PP']],
    'VP': [['V', 'NP'], ['V', 'NP', 'PP']],
    'PP': [['P', 'NP']],
    'Det': ['the', 'a'],
    'N': ['dog', 'cat', 'man'],
    'V': ['chased', 'caught'],
    'P': ['in', 'on']
}

parser = EarleyParser(grammar)
sentence = ['the', 'dog', 'chased', 'the', 'cat']
result = parser.parse(sentence)

if result:
    print("The sentence is valid according to the grammar.")
else:
    print("The sentence is not valid according to the grammar.")
